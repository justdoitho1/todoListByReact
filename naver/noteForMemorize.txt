아토믹 디자인 
원자분자유기체는 공통컴포넌트 
atom 원자: div, button 같은 거
분자 : 2~3개 정도 단위의 컴포넌트.  
유기체 : common modal 같은 거 

여기저기서 쓰이는 컴포넌트들이 있으면 원자 분자 유기체에서 공통으로 만들어 가져다 쓰기 

Atoms
해당 설계의 최소 단위
form, input ,button 같은 HTML의 태그나 최소의 기능을 가진 기능의 커스텀 태그 컴포넌트
설계에 따라 속성에 따른 스타일 주입이 들어갈 수 있습니다.
Card System에서 제목, 내용, footer 들이 각각 이에 해당됩니다.
Molecules
Atom들을 최소의 역할을 수행할 수 있게 합한 그룹
입력을 받기 위한 form + label + input이 해당 됩니다.
Card System에서 제목 + 내용 + footer들이 합쳐진 하나의 Card가 이에 해당됩니다.
Organisms
배치를 위한 layout 단위로 하나의 인터페스를 형성하는 그룹
header, navigation 등이 이에 해당됩니다.
Card System에서 Card들이 Grid layout으로 형성된 집합이 이에 해당됩니다.
Templates
실제 Organisms들을 레이아웃이나 데이터 흐름을 연결합니다.
클래스 시스템의 클래스로, 객체의 설계도, 페이지의 설계도입니다.
Pages
정의된 Template에 데이터를 넣어 뷰를 완성시키는 단계입니다.
클래스 시스템의 인스턴스, 객체의 구현체, 페이지 설계도로 그린 페이지 그 자체입니다.

라우팅 : 각 페이지별 주소 지정 
Route 를 Routes로 감싸주고 
 <Route path="/" element={<h1>메인</h1>}></Route>
 return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Main />} />
        <Route path="/movie" element={<Movie />} />
        <Route path="/book" element={<Book />} />
      </Routes>
    </BrowserRouter>
  );

Router.js가 app.js 같은 거라고 생각하면됨
막상 app.js에는 Router만 있음
이렇게 써줘야 react-router-dom을 쓸 수있음 

recoil, redux : 전역상태관리(로그인여부)
react-query : api 관련 

js의 innerHTML의 대체재 코드를 html에 직접 넣는 것은 공격에 취약하므로 별로임 
  <Title dangerouslySetInnerHTML={{ __html: title }} />

pagination, dynamic route 도 되면 구현해보는 걸 추천 


라우터 사용법 : 
Router.js 참고.
App.js에서
function App() {
  return (
    <>
      <Router />
    </>
  );
}


Router 
Route
Main 		 TopNav
-Layout			-Movie
				-SearchForm
-Link/BtnLink			-List

컴포넌트는 컴포넌트끼리 모아두고, 데이터는 데이터끼리 모아둠. 
컴포넌트에서 페이지는 페이지끼리 해놓고, 
자주 쓰는 공통컴포넌트들은 별도로 구분 

